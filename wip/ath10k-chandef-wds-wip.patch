diff --git a/drivers/net/wireless/ath/ath10k/mac.c b/drivers/net/wireless/ath/ath10k/mac.c
index 700225e..658d19c 100644
--- a/drivers/net/wireless/ath/ath10k/mac.c
+++ b/drivers/net/wireless/ath/ath10k/mac.c
@@ -34,6 +34,8 @@
 #include "wmi-ops.h"
 #include "wow.h"

+#define ATH10K_USE_CHANDEF
+
 /*********/
 /* Rates */
 /*********/
@@ -671,6 +673,26 @@ static u8 ath10k_parse_mpdudensity(u8 mpdudensity)
	}
 }

+#ifdef ATH10K_USE_CHANDEF
+
+int ath10k_mac_vif_chan(struct ieee80211_vif *vif,
+			struct cfg80211_chan_def *def)
+{
+	struct ath10k_vif *arvif = ath10k_vif_to_arvif(vif);
+	struct ath10k *ar = arvif->ar;
+	struct cfg80211_chan_def *chandef = &ar->chandef;
+
+	*def = *chandef;
+
+	if (!def->chan)
+		return -ENOENT;
+
+	return 0;
+}
+
+#else
+
+/* Normal upstream channel-ctxt support */
 int ath10k_mac_vif_chan(struct ieee80211_vif *vif,
			struct cfg80211_chan_def *def)
 {
@@ -719,6 +741,9 @@ ath10k_mac_get_any_chandef_iter(struct ieee80211_hw *hw,
	*def = &conf->def;
 }

+#endif
+
+
 static int ath10k_peer_create(struct ath10k *ar,
			      struct ieee80211_vif *vif,
			      struct ieee80211_sta *sta,
@@ -1047,11 +1072,15 @@ static int ath10k_monitor_vdev_start(struct ath10k *ar, int vdev_id)

	lockdep_assert_held(&ar->conf_mutex);

+#ifdef ATH10K_USE_CHANDEF
+	chandef = &ar->chandef;
+#else
	ieee80211_iter_chan_contexts_atomic(ar->hw,
					    ath10k_mac_get_any_chandef_iter,
					    &chandef);
	if (WARN_ON_ONCE(!chandef))
		return -ENOENT;
+#endif

	channel = chandef->chan;

@@ -1240,6 +1269,7 @@ static int ath10k_monitor_stop(struct ath10k *ar)

 static bool ath10k_mac_monitor_vdev_is_needed(struct ath10k *ar)
 {
+#ifndef ATH10K_USE_CHANDEF
	int num_ctx;

	/* At least one chanctx is required to derive a channel to start
@@ -1248,6 +1278,7 @@ static bool ath10k_mac_monitor_vdev_is_needed(struct ath10k *ar)
	num_ctx = ath10k_mac_num_chanctxs(ar);
	if (num_ctx == 0)
		return false;
+#endif

	/* If there's already an existing special monitor interface then don't
	 * bother creating another monitor vdev.
@@ -1262,6 +1293,13 @@ static bool ath10k_mac_monitor_vdev_is_needed(struct ath10k *ar)
	       test_bit(ATH10K_CAC_RUNNING, &ar->dev_flags);
 }

+#ifdef ATH10K_USE_CHANDEF
+static bool ath10k_mac_monitor_vdev_is_allowed(struct ath10k *ar)
+{
+	return true;
+}
+#else
+
 static bool ath10k_mac_monitor_vdev_is_allowed(struct ath10k *ar)
 {
	int num_ctx;
@@ -1277,6 +1315,7 @@ static bool ath10k_mac_monitor_vdev_is_allowed(struct ath10k *ar)

	return true;
 }
+#endif

 static int ath10k_monitor_recalc(struct ath10k *ar)
 {
@@ -1408,6 +1447,7 @@ static int ath10k_stop_cac(struct ath10k *ar)
	return 0;
 }

+#ifndef ATH10K_USE_CHANDEF
 static void ath10k_mac_has_radar_iter(struct ieee80211_hw *hw,
				      struct ieee80211_chanctx_conf *conf,
				      void *data)
@@ -1428,6 +1468,7 @@ static bool ath10k_mac_has_radar_enabled(struct ath10k *ar)

	return has_radar;
 }
+#endif

 static void ath10k_recalc_radar_detection(struct ath10k *ar)
 {
@@ -1437,8 +1478,13 @@ static void ath10k_recalc_radar_detection(struct ath10k *ar)

	ath10k_stop_cac(ar);

+#ifdef ATH10K_USE_CHANDEF
+	if (!ar->radar_enabled)
+		return;
+#else
	if (!ath10k_mac_has_radar_enabled(ar))
		return;
+#endif

	if (ar->num_started_vdevs > 0)
		return;
@@ -1488,13 +1534,22 @@ static int ath10k_vdev_stop(struct ath10k_vif *arvif)
	return ret;
 }

+#ifdef ATH10K_USE_CHANDEF
+static int ath10k_vdev_start_restart(struct ath10k_vif *arvif, bool restart)
+#else
 static int ath10k_vdev_start_restart(struct ath10k_vif *arvif,
				     const struct cfg80211_chan_def *chandef,
				     bool restart)
+#endif
 {
	struct ath10k *ar = arvif->ar;
	struct wmi_vdev_start_request_arg arg = {};
+#ifdef ATH10K_USE_CHANDEF
+	struct cfg80211_chan_def *chandef = &ar->chandef;
+	int ret = 0, ret2;
+#else
	int ret = 0;
+#endif

	lockdep_assert_held(&ar->conf_mutex);

@@ -1570,9 +1625,33 @@ static int ath10k_vdev_start_restart(struct ath10k_vif *arvif,
	ar->num_started_vdevs++;
	ath10k_recalc_radar_detection(ar);

+#ifdef ATH10K_USE_CHANDEF
+	ret = ath10k_monitor_recalc(ar);
+	if (ret) {
+		ath10k_warn(ar, "mac failed to recalc monitor for vdev %i restart %d: %d\n",
+			    arg.vdev_id, restart, ret);
+		ret2 = ath10k_vdev_stop(arvif);
+		if (ret2)
+			ath10k_warn(ar, "mac failed to stop vdev %i restart %d: %d\n",
+				    arg.vdev_id, restart, ret2);
+	}
+#endif
+
+
	return ret;
 }

+#ifdef ATH10K_USE_CHANDEF
+static int ath10k_vdev_start(struct ath10k_vif *arvif)
+{
+	return ath10k_vdev_start_restart(arvif, false);
+}
+
+static int ath10k_vdev_restart(struct ath10k_vif *arvif)
+{
+	return ath10k_vdev_start_restart(arvif, true);
+}
+#else
 static int ath10k_vdev_start(struct ath10k_vif *arvif,
			     const struct cfg80211_chan_def *def)
 {
@@ -1584,6 +1663,8 @@ static int ath10k_vdev_restart(struct ath10k_vif *arvif,
 {
	return ath10k_vdev_start_restart(arvif, def, true);
 }
+#endif
+

 static int ath10k_mac_setup_bcn_p2p_ie(struct ath10k_vif *arvif,
				       struct sk_buff *bcn)
@@ -1782,7 +1863,11 @@ static int ath10k_mac_vif_fix_hidden_ssid(struct ath10k_vif *arvif)
		return ret;
	}

+#ifdef ATH10K_USE_CHANDEF
+	ret = ath10k_vdev_restart(arvif);
+#else
	ret = ath10k_vdev_restart(arvif, &def);
+#endif
	if (ret) {
		ath10k_warn(ar, "failed to restart ap vdev %i: %d\n",
			    arvif->vdev_id, ret);
@@ -1813,7 +1898,10 @@ static void ath10k_control_beaconing(struct ath10k_vif *arvif,
		if (ret)
			ath10k_warn(ar, "failed to down vdev_id %i: %d\n",
				    arvif->vdev_id, ret);
-
+#ifdef ATH10K_USE_CHANDEF
+		// FIXME: is this vdev_stop call really needed here ?
+		ath10k_vdev_stop(arvif);
+#endif
		arvif->is_up = false;

		spin_lock_bh(&arvif->ar->data_lock);
@@ -1824,7 +1912,11 @@ static void ath10k_control_beaconing(struct ath10k_vif *arvif,
	}

	arvif->tx_seq_no = 0x1000;
-
+#ifdef ATH10K_USE_CHANDEF
+	ret = ath10k_vdev_start(arvif);
+	if (ret)
+		return;
+#endif
	arvif->aid = 0;
	ether_addr_copy(arvif->bssid, info->bssid);

@@ -1833,6 +1925,9 @@ static void ath10k_control_beaconing(struct ath10k_vif *arvif,
	if (ret) {
		ath10k_warn(ar, "failed to bring up vdev %d: %i\n",
			    arvif->vdev_id, ret);
+#ifdef ATH10K_USE_CHANDEF
+		ath10k_vdev_stop(arvif);
+#endif
		return;
	}

@@ -3362,6 +3457,10 @@ static void ath10k_check_apply_special_rates(struct ath10k *ar,
		band = def.chan->band;

	sband = hw->wiphy->bands[band];
+	if (!sband) {
+		ath10k_err(ar, "apply-special-rates, sband NULL, band: %d\n", band);
+		return;
+	}
	ratemask = arvif->bitrate_mask.control[band].legacy;

	/* 10.1.467 Firmware defaults:
@@ -3478,8 +3577,17 @@ static int ath10k_station_assoc(struct ath10k *ar,
	struct wmi_peer_assoc_complete_arg peer_arg;
	int ret = 0;

+	struct cfg80211_chan_def def;
+
	lockdep_assert_held(&ar->conf_mutex);

+	ret = ath10k_mac_vif_chan(vif, &def);
+	if (ret) {
+		ath10k_warn(ar, "station-assoc:  no channel configured, peer assoc for %pM vdev %i: %i\n",
+			    sta->addr, arvif->vdev_id, ret);
+		return ret;
+	}
+
	ret = ath10k_peer_assoc_prepare(ar, vif, sta, &peer_arg);
	if (ret) {
		ath10k_warn(ar, "failed to prepare WMI peer assoc for %pM vdev %i: %i\n",
@@ -5499,6 +5607,117 @@ static int ath10k_mac_txpower_recalc(struct ath10k *ar)
	return 0;
 }

+#ifdef ATH10K_USE_CHANDEF
+
+static const char *chandef_get_width(enum nl80211_chan_width width)
+{
+	switch (width) {
+	case NL80211_CHAN_WIDTH_20_NOHT:
+		return "20 (noht)";
+	case NL80211_CHAN_WIDTH_20:
+		return "20";
+	case NL80211_CHAN_WIDTH_40:
+		return "40";
+	case NL80211_CHAN_WIDTH_80:
+		return "80";
+	case NL80211_CHAN_WIDTH_80P80:
+		return "80+80";
+	case NL80211_CHAN_WIDTH_160:
+		return "160";
+	case NL80211_CHAN_WIDTH_5:
+		return "5";
+	case NL80211_CHAN_WIDTH_10:
+		return "10";
+	}
+	return "?";
+}
+
+static void ath10k_config_chan(struct ath10k *ar)
+{
+	struct ath10k_vif *arvif;
+	int ret;
+	/*struct ieee80211_hw *hw = ar->hw;*/
+
+
+
+	lockdep_assert_held(&ar->conf_mutex);
+
+	ath10k_dbg(ar, ATH10K_DBG_MAC,
+		   "mac config channel to %dMHz (cf1 %dMHz cf2 %dMHz width %s)\n",
+		   ar->chandef.chan->center_freq,
+		   ar->chandef.center_freq1,
+		   ar->chandef.center_freq2,
+		   chandef_get_width(ar->chandef.width));
+
+	/*ar->chandef.chan->dbg_idx_ch = hw->dbg_idx_ch;*/
+
+	/* First stop monitor interface. Some FW versions crash if there's a
+	 * lone monitor interface. */
+	if (ar->monitor_started)
+		ath10k_monitor_stop(ar);
+
+	list_for_each_entry(arvif, &ar->arvifs, list) {
+		if (!arvif->is_started)
+			continue;
+
+		if (!arvif->is_up)
+			continue;
+
+		if (arvif->vdev_type == WMI_VDEV_TYPE_MONITOR)
+			continue;
+
+		ret = ath10k_wmi_vdev_down(ar, arvif->vdev_id);
+		if (ret) {
+			ath10k_warn(ar, "failed to down vdev %d: %d\n",
+				    arvif->vdev_id, ret);
+			continue;
+		}
+	}
+
+	/* all vdevs are downed now - attempt to restart and re-up them */
+
+	list_for_each_entry(arvif, &ar->arvifs, list) {
+		if (!arvif->is_started)
+			continue;
+
+		if (arvif->vdev_type == WMI_VDEV_TYPE_MONITOR)
+			continue;
+
+		ret = ath10k_mac_setup_bcn_tmpl(arvif);
+		if (ret)
+			ath10k_warn(ar, "failed to update bcn tmpl during csa: %d\n",
+				    ret);
+
+		ret = ath10k_mac_setup_prb_tmpl(arvif);
+		if (ret)
+			ath10k_warn(ar, "failed to update prb tmpl during csa: %d\n",
+				    ret);
+		ret = ath10k_vdev_restart(arvif);
+		if (ret) {
+			ath10k_warn(ar, "failed to restart vdev %d: %d\n",
+				    arvif->vdev_id, ret);
+			continue;
+		}
+
+		if (!arvif->is_up)
+			continue;
+
+		ret = ath10k_wmi_vdev_up(arvif->ar, arvif->vdev_id, arvif->aid,
+					 arvif->bssid);
+		if (ret) {
+			ath10k_warn(ar, "failed to bring vdev up %d: %d\n",
+				    arvif->vdev_id, ret);
+			continue;
+		}
+	}
+
+	ath10k_monitor_recalc(ar);
+}
+
+// in a chandef driver, actual channel change happens here (set_channel)
+#endif
+
+
 static int ath10k_config(struct ieee80211_hw *hw, u32 changed)
 {
	struct ath10k *ar = hw->priv;
@@ -5507,6 +5726,28 @@ static int ath10k_config(struct ieee80211_hw *hw, u32 changed)

	mutex_lock(&ar->conf_mutex);

+#ifdef ATH10K_USE_CHANDEF
+	if (changed & IEEE80211_CONF_CHANGE_CHANNEL) {
+		ath10k_dbg(ar, ATH10K_DBG_MAC,
+			   "mac config channel %dMHz flags 0x%x radar %d\n",
+			   conf->chandef.chan->center_freq,
+			   conf->chandef.chan->flags,
+			   conf->radar_enabled);
+
+		spin_lock_bh(&ar->data_lock);
+		ar->rx_channel = conf->chandef.chan;
+		spin_unlock_bh(&ar->data_lock);
+
+		ar->radar_enabled = conf->radar_enabled;
+		ath10k_recalc_radar_detection(ar);
+
+		if (!cfg80211_chandef_identical(&ar->chandef, &conf->chandef)) {
+			ar->chandef = conf->chandef;
+			ath10k_config_chan(ar);
+		}
+	}
+#endif
+
	if (changed & IEEE80211_CONF_CHANGE_PS)
		ath10k_config_ps(ar);

@@ -5673,6 +5914,11 @@ static int ath10k_add_interface(struct ieee80211_hw *hw,
	case NL80211_IFTYPE_MONITOR:
		arvif->vdev_type = WMI_VDEV_TYPE_MONITOR;
		break;
+
+	case NL80211_IFTYPE_WDS:
+		arvif->vdev_type = WMI_VDEV_TYPE_STA;
+		break;
+
	default:
		WARN_ON(1);
		break;
@@ -6854,6 +7100,24 @@ static int ath10k_sta_state(struct ieee80211_hw *hw,
			goto exit;
		}

+#ifdef ATH10K_USE_CHANDEF
+		if (vif->type == NL80211_IFTYPE_STATION) {
+			WARN_ON(arvif->is_started);
+
+			ret = ath10k_vdev_start(arvif);
+			if (ret) {
+				ath10k_warn(ar, "failed to start vdev %i: %d\n",
+					    arvif->vdev_id, ret);
+				WARN_ON(ath10k_peer_delete(ar, arvif->vdev_id,
+							   sta->addr));
+				ath10k_mac_dec_num_stations(arvif,sta);
+				goto exit;
+			}
+
+			arvif->is_started = true;
+		}
+#endif
+
		spin_lock_bh(&ar->data_lock);

		peer = ath10k_peer_find(ar, arvif->vdev_id, sta->addr);
@@ -6909,6 +7173,19 @@ static int ath10k_sta_state(struct ieee80211_hw *hw,
			   "mac vdev %d peer delete %pM sta %pK (sta gone)\n",
			   arvif->vdev_id, sta->addr, sta);

+#ifdef ATH10K_USE_CHANDEF
+		if (vif->type == NL80211_IFTYPE_STATION) {
+			WARN_ON(!arvif->is_started);
+
+			ret = ath10k_vdev_stop(arvif);
+			if (ret)
+				ath10k_warn(ar, "failed to stop vdev %i: %d\n",
+					    arvif->vdev_id, ret);
+
+			arvif->is_started = false;
+		}
+#endif
+
		ret = ath10k_peer_delete(ar, arvif->vdev_id, sta->addr);
		if (ret)
			ath10k_warn(ar, "failed to delete peer %pM for vdev %d: %i\n",
@@ -6957,6 +7234,7 @@ static int ath10k_sta_state(struct ieee80211_hw *hw,
	} else if (old_state == IEEE80211_STA_AUTH &&
		   new_state == IEEE80211_STA_ASSOC &&
		   (vif->type == NL80211_IFTYPE_AP ||
+		    vif->type == NL80211_IFTYPE_WDS ||
		    vif->type == NL80211_IFTYPE_MESH_POINT ||
		    vif->type == NL80211_IFTYPE_ADHOC)) {
		/*
@@ -6993,6 +7271,7 @@ static int ath10k_sta_state(struct ieee80211_hw *hw,
	} else if (old_state == IEEE80211_STA_ASSOC &&
		    new_state == IEEE80211_STA_AUTH &&
		    (vif->type == NL80211_IFTYPE_AP ||
+		     vif->type == NL80211_IFTYPE_WDS ||
		     vif->type == NL80211_IFTYPE_MESH_POINT ||
		     vif->type == NL80211_IFTYPE_ADHOC)) {
		/*
@@ -8000,6 +8279,8 @@ static int ath10k_ampdu_action(struct ieee80211_hw *hw,
	return -EINVAL;
 }

+#ifndef ATH10K_USE_CHANDEF
+
 static void
 ath10k_mac_update_rx_channel(struct ath10k *ar,
			     struct ieee80211_chanctx_conf *ctx,
@@ -8405,6 +8686,7 @@ ath10k_mac_op_switch_vif_chanctx(struct ieee80211_hw *hw,
	mutex_unlock(&ar->conf_mutex);
	return 0;
 }
+#endif /* stuff needed for channel-context */

 static void ath10k_mac_op_sta_pre_rcu_remove(struct ieee80211_hw *hw,
					     struct ieee80211_vif *vif,
@@ -8454,12 +8736,14 @@ static const struct ieee80211_ops ath10k_ops = {
	.get_et_sset_count		= ath10k_debug_get_et_sset_count,
	.get_et_stats			= ath10k_debug_get_et_stats,
	.get_et_strings			= ath10k_debug_get_et_strings,
+#ifndef ATH10K_USE_CHANDEF
	.add_chanctx			= ath10k_mac_op_add_chanctx,
	.remove_chanctx			= ath10k_mac_op_remove_chanctx,
	.change_chanctx			= ath10k_mac_op_change_chanctx,
	.assign_vif_chanctx		= ath10k_mac_op_assign_vif_chanctx,
	.unassign_vif_chanctx		= ath10k_mac_op_unassign_vif_chanctx,
	.switch_vif_chanctx		= ath10k_mac_op_switch_vif_chanctx,
+#endif
	.sta_pre_rcu_remove		= ath10k_mac_op_sta_pre_rcu_remove,

	CFG80211_TESTMODE_CMD(ath10k_tm_cmd)
@@ -8611,6 +8895,7 @@ static struct ieee80211_iface_limit ath10k_10x_ct_if_limits[] = {
	.max	= DEF_TARGET_10X_NUM_VDEVS_CT,
	.types	= BIT(NL80211_IFTYPE_STATION)
		| BIT(NL80211_IFTYPE_P2P_CLIENT)
+		| BIT(NL80211_IFTYPE_WDS)
	},
	{
	.max	= 3,
@@ -8795,7 +9080,8 @@ static const struct ieee80211_iface_combination ath10k_10_4_if_comb[] = {
 static struct ieee80211_iface_limit ath10k_10_4_ct_if_limits[] = {
	{
		.max = 1,
-		.types = BIT(NL80211_IFTYPE_STATION),
+		.types = BIT(NL80211_IFTYPE_STATION) |
+			BIT(NL80211_IFTYPE_WDS),
	},
	{
		.max	= 16,
@@ -9074,6 +9360,9 @@ int ath10k_mac_register(struct ath10k *ar)
	ar->hw->wiphy->interface_modes =
		BIT(NL80211_IFTYPE_STATION) |
		BIT(NL80211_IFTYPE_AP) |
+#ifdef ATH10K_USE_CHANDEF
+		BIT(NL80211_IFTYPE_WDS) |
+#endif
		BIT(NL80211_IFTYPE_MESH_POINT);

	ar->hw->wiphy->available_antennas_rx = ar->cfg_rx_chainmask;
@@ -9098,7 +9387,9 @@ int ath10k_mac_register(struct ath10k *ar)
		ieee80211_hw_set(ar->hw, CONNECTION_MONITOR);
	ieee80211_hw_set(ar->hw, SUPPORTS_PER_STA_GTK);
	ieee80211_hw_set(ar->hw, WANT_MONITOR_VIF);
+#ifndef ATH10K_USE_CHANDEF
	ieee80211_hw_set(ar->hw, CHANCTX_STA_CSA);
+#endif
	ieee80211_hw_set(ar->hw, QUEUE_CONTROL);
	ieee80211_hw_set(ar->hw, SUPPORTS_TX_FRAG);
	ieee80211_hw_set(ar->hw, REPORTS_LOW_ACK);
